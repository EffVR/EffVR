#pragma kernel Reprojector
RWTexture2D<half4> output;
Texture2D<half2> shift_buffer;
Texture2D<half4> rgb_buffer;

half tex_width;

[numthreads(1, 64, 1)]
void Reprojector(uint2 id : SV_DispatchThreadID) {
    uint last_x = 0;
    half last_shift = 0;

	for (int i = 0; i < tex_width; ++i) {    // for left,  for right is  int i = tex_width; i > 0; i--
        const uint2 xy = uint2(i, id.y);
        const half2 shift_depth = shift_buffer[xy];
        const half shift = shift_depth.x;
		if (shift > 1) { // fix blind spot at the right edge of image
            const uint new_x = shift * tex_width + 0.5f;
            if (new_x > last_x + 1) {
                for (int k = last_x + 1; k < new_x; k++) {
                    output[uint2(k, id.y)] = half4(-last_shift, new_x - last_x - 1, 0, 0);
                }
            }
            return;
		}
        const half4 color = rgb_buffer[xy];
        const uint new_x = shift * tex_width + 0.5f;
        const uint2 new_xy = uint2(new_x, id.y);            // Potential artifacts.

        if(last_x == 0)
        {
			for (int k = 0;k < new_x; k++)
			{
                output[uint2(k, id.y)] = half4(shift, new_x, 0, 0);
            }
        }
        else if(new_x > last_x + 1)
        {
            for (int k = last_x + 1; k < new_x; k++)
            {
                output[uint2(k, id.y)] = half4(-last_shift, new_x - last_x - 1, 0, 0);
            }
        }

    	if (output[new_xy].w == 0) {
            output[new_xy] = half4(color.xyz, shift_depth.y + 0.0001f);
    	}
        last_x = new_x;
        last_shift = shift;
    }
}